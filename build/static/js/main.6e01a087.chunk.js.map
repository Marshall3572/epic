{"version":3,"sources":["logo.svg","components/Header.js","components/Footer.js","components/Loading.js","App.js","reportWebVitals.js","index.js","models/index.js","stores/image.js","stores/user.js","stores/history.js","stores/auth.js","stores/index.js"],"names":["Header","styled","header","Logo","img","StyledLink","NavLink","Login","div","StyledButton","Button","Component","observer","history","useHistory","useStores","UserStore","AuthStore","src","LogoUrl","exact","to","activeClassName","currentUser","attributes","username","type","onClick","logout","console","log","push","Footer","footer","Home","lazy","History","About","Register","App","fallback","Loading","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","AV","init","appId","appKey","serverURL","Auth","register","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","error","login","logIn","logOut","getCurrentUser","current","Uploader","add","file","filename","item","Object","avFile","File","set","save","serverfile","err","find","page","limit","query","Query","include","skip","descending","equalTo","result","catch","ImageStore","makeObservable","this","newFilename","newFile","isUploading","serverFile","message","finally","observable","action","newList","list","concat","isLoading","append","length","hasMore","values","pullUser","info","resetUser","HistoryStore","reset","context","createContext","window","stores","useContext"],"mappings":"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","file":"static/js/main.6e01a087.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react'\nimport LogoUrl from '../logo.svg'\nimport {NavLink, useHistory} from 'react-router-dom'\nimport styled from 'styled-components'\nimport {Button} from 'antd'\nimport {useStores} from '../stores'\nimport {observer} from 'mobx-react'\n\n// header是styled的方法，` `里是params\nconst Header = styled.header`\n  display: flex;\n  align-items: center;\n  padding: 10px 100px;\n  background-color: #02101f;\n`\nconst Logo = styled.img`\n  height: 30px\n`\n// 注意这里的不同\nconst StyledLink = styled(NavLink)`\n  color: #fff;\n  margin-left: 30px;\n\n  &.active {\n    border-bottom: 1px solid #fff;\n  }\n`\n\nconst Login = styled.div`\n  margin-left: auto;\n`\nconst StyledButton = styled(Button)`\n  margin-left: 10px;\n`\n\nconst Component = observer(() => {\n\n    const history = useHistory()\n    const {UserStore, AuthStore} = useStores()\n\n    const handleLogout = () => {\n      AuthStore.logout()\n    }\n\n    const handleRegister = () => {\n      console.log('跳转到注册页面')\n      history.push('/register')\n    }\n\n    const handleLogin = () => {\n      console.log('跳转到登陆页面')\n      history.push('/login')\n    }\n\n    return (\n      <Header>\n        <Logo src={LogoUrl}/>\n        <nav>\n          {/*activeClassName是navLink特有的*/}\n          <StyledLink exact to=\"/\" activeClassName=\"active\">首页</StyledLink>\n          <StyledLink to=\"/history\" activeClassName=\"active\">上传历史</StyledLink>\n          <StyledLink to=\"/about\" activeClassName=\"active\">关于我</StyledLink>\n        </nav>\n        <Login>\n          {\n            UserStore.currentUser ? <>\n                {UserStore.currentUser.attributes.username}\n                <StyledButton type=\"primary\" onClick={handleLogout}>注销</StyledButton>\n              </>\n              : <>\n                <StyledButton type=\"primary\" onClick={handleLogin}>登陆</StyledButton>\n                <StyledButton type=\"primary\" onClick={handleRegister}>注册</StyledButton>\n              </>\n          }\n        </Login>\n      </Header>\n    )\n  }\n)\nexport default Component\n\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Footer = styled.footer`\n  paddiing: 10px 100px;\n  text-align: center;\n  font-size: 12px;\n  color: #aaa;\n`\n\nconst Component = () => {\n  return (\n    <Footer>\n      <p>@Marshall_Liu</p>\n    </Footer>\n  )\n}\n\nexport default Component","import React from 'react'\n\nconst Component = () => {\n  return (\n    <div>\n      Loading...\n    </div>\n  )\n}\nexport default Component","import React, {Suspense, lazy} from 'react'\nimport './App.css'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Loading from './components/Loading'\nimport {Switch, Route} from 'react-router-dom'\n\n// import {Home} from './pages/Home'\n// import {History} from './pages/History'\n// import {About} from './pages/About'\nconst Home = lazy(() => import('./pages/Home'))\n  // .then(res => ({default: res.History} ) )\nconst History = lazy(() => import('./pages/History'))\nconst About = lazy(() => import('./pages/About'))\nconst Login = lazy(() => import('./pages/Login'))\nconst Register = lazy(() => import('./pages/Register'))\n\nfunction App() {\n  // .then(res => ({default:res.History}))\n  // console.log('alias导出：',import('./pages/History').then(res => ({default:res.History})))\n  // console.log('default导出：',import('./pages/Home'))\n  return (\n    <>\n      <Header/>\n      <main>\n        {/*添加suspense和fallback机制，让分包加载的时候显示loading的状态*/}\n        <Suspense fallback={<Loading/>}>\n          <Switch>\n            {/*exact表示严格匹配模式，加了后代就无法匹配自己*/}\n            <Route path=\"/\" exact component={Home}/>\n            <Route path=\"/history\" component={History}/>\n            <Route path=\"/about\" component={About}/>\n            <Route path=\"/Login\" component={Login}/>\n            <Route path=\"/Register\" component={Register}/>\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer/>\n    </>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport reportWebVitals from './reportWebVitals'\nimport {\n  HashRouter as Router\n} from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n      <App/>\n    </Router>,\n  document.getElementById('root')\n)\n\nreportWebVitals()","import AV, {Query, User} from 'leancloud-storage'\nimport resolve from 'resolve'\n\nAV.init({\n  appId: 'NMaRGoaksIqBex94eqsQm1t5-gzGzoHsz',\n  appKey: 'HROcGnttJRHfwLsFD4gyRsRo',\n  serverURL: 'https://nmargoak.lc-cn-n1-shared.com'\n})\n\nconst Auth = {\n  // 如果不是用的leanCloud，这里的代码可以替换成ajax请求，一样的\n  register(username, password) {\n    let user = new User()\n    user.setUsername(username)\n    user.setPassword(password)\n    return new Promise((resolve, reject) => {\n      user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\n    })\n  },\n\n  login(username, password) {\n    return new Promise((resolve, reject) => {\n      User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error))\n    })\n  },\n  logout() {\n    User.logOut()\n  },\n  getCurrentUser() {\n    return User.current()\n  }\n}\n\nconst Uploader = {\n  add(file, filename) {\n    const item = new AV.Object('Image')\n    const avFile = new AV.File(filename, file)\n    item.set('filename', filename)\n    item.set('owner', AV.User.current())\n    item.set('url', avFile)\n    return new Promise((resolve, reject) => {\n      item.save().then(serverfile => resolve(serverfile), err => reject(err))\n    })\n  },\n  find({page = 0, limit = 10}) {\n    const query = new AV.Query('Image')\n    query.include('owner')\n    query.limit(limit)\n    query.skip(page * limit)\n    query.descending('createAt')\n    // 只能查询自己的文件\n    query.equalTo('owner', AV.User.current())\n    return new Promise((resolve, reject) => {\n      query.find()\n        .then((result) => {\n          resolve(result)\n        })\n        .catch((err) => {\n          reject(err)\n        })\n    })\n  }\n}\n\nexport {\n  // 先把这一个API暴露出去，后边有再加\n  Auth,\n  Uploader\n}","import React from 'react'\nimport {observable, action, makeObservable} from 'mobx'\nimport {Uploader} from '../models'\nimport {message} from 'antd'\n\nclass ImageStore {\n  constructor() {\n    makeObservable(this)\n  }\n\n  @observable filename = ''\n  @observable file = null\n  @observable isUploading = false\n  @observable serverFile = null\n\n  @action setFilename(newFilename) {\n    this.filename = newFilename\n  }\n\n  @action setFile(newFile) {\n    this.file = newFile\n  }\n\n  @action upload() {\n    this.isUploading = true\n    // 若上传失败，上传结果展示的还是上次的结果，会让人产生误会，所以每次上传都清空一下\n    this.serverFile = null\n\n    return new Promise((resolve, reject) => {\n      Uploader.add(this.file, this.filename).then(serverFile => {\n        this.serverFile = serverFile\n        resolve(serverFile)\n      }).catch(err => {\n        message.error('上传失败')\n        reject(err)\n      }).finally(() => {\n        this.isUploading = false\n      })\n    })\n  }\n\n  @action reset() {\n    this.isUploading = false\n    this.serverFile = null\n  }\n}\n\n\n// export { UserStore } 不能直接这么写，最好是直接导出一个对象\nexport default new ImageStore()\n","import {observable, action, makeObservable} from 'mobx'\nimport {Auth} from '../models'\n\nclass UserStore {\n  constructor() {\n    makeObservable(this)\n  }\n\n  @observable currentUser = null\n\n  @action pullUser() {\n    this.currentUser = Auth.getCurrentUser()\n  }\n\n  @action resetUser() {\n    this.currentUser = null\n  }\n}\n\n\n// export { UserStore } 不能直接这么写，最好是直接导出一个对象\nexport default new UserStore()\n","import React from 'react'\nimport {Uploader} from '../models'\nimport {message} from 'antd'\nimport {action, observable} from 'mobx'\n\nclass HistoryStore {\n  @observable list = []\n  @observable isLoading = false\n  @observable hasMore = true\n  @observable page = 0\n  limit = 10\n\n  @action append(newList) {\n    this.list = this.list.concat(newList)\n  }\n\n  @action find() {\n    this.isLoading = true\n    Uploader.find({page: this.page, limit: this.limit})\n      .then(newList => {\n        this.append(newList)\n        if (newList.length < this.limit) {\n          this.hasMore = false\n        }\n      })\n      .catch(err => message.error('加载数据失败'))\n      .finally(() => {\n        this.isLoading = false\n      })\n  }\n\n  @action reset() {\n    this.list = []\n    this.isLoading = false\n    this.hasMore = true\n    this.page = 0\n  }\n}\n\nexport default new HistoryStore()\n","import {observable, action, makeObservable} from 'mobx'\nimport {Auth} from '../models'\nimport UserStore from './user'\nimport HistoryStore from './history'\nimport {message} from 'antd'\nimport ImageStore from './image'\n\nclass AuthStore {\n  constructor() {\n    makeObservable(this)\n  }\n\n  @observable values = {\n    username: '',\n    password: ''\n  }\n\n  @action setUsername(username) {\n    this.values.username = username\n  }\n\n  @action setPassword(password) {\n    this.values.password = password\n  }\n\n  @action login() {\n    // 因为登陆成功后可能要执行跳转回首页等操作，所以我们用Promise进行封装，可以回调\n    return new Promise((resolve, reject) => {\n      Auth.login(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser()\n          message.info('登陆成功')\n          resolve(user)\n        })\n        .catch(err => {\n          UserStore.resetUser()\n          message.error('登陆失败')\n          reject(err)\n        })\n    })\n  }\n\n  @action register() {\n    return new Promise((resolve, reject) => {\n      Auth.register(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser()\n          message.info('注册成功')\n          resolve(user)\n        })\n        .catch(err => {\n          UserStore.resetUser()\n          message.error('注册失败')\n          reject(err)\n        })\n    })\n  }\n\n  @action logout() {\n    Auth.logout()\n    UserStore.resetUser()\n    HistoryStore.reset()\n    ImageStore.reset()\n  }\n}\n\nexport default new AuthStore()\n","// 总入口，把各种状态进行一个统一的导出\nimport React, { createContext, useContext } from 'react';\nimport AuthStore from './auth';\nimport UserStore from './user'\nimport ImageStore from './image'\nimport HistoryStore from './history'\n\n\nconst context = createContext({\n  // AuthStore: new AuthStore()\n  AuthStore,\n  UserStore,\n  ImageStore,\n  HistoryStore\n});\n\n// 测试：这样我们就可以在控制台看到数据\nwindow.stores = {\n  AuthStore,\n  UserStore,\n  ImageStore,\n  HistoryStore\n}\n\nexport const useStores= () => useContext(context);"],"sourceRoot":""}