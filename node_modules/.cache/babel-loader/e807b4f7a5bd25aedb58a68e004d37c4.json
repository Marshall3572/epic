{"ast":null,"code":"import _initializerDefineProperty from\"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";import _classCallCheck from\"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _applyDecoratedDescriptor from\"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";import _initializerWarningHelper from\"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";var _class,_descriptor;import{observable,action,makeObservable}from'mobx';import{Auth}from'../models';import UserStore from'./user';import HistoryStore from'./history';import{message}from'antd';import ImageStore from'./image';var AuthStore=(_class=/*#__PURE__*/function(){function AuthStore(){_classCallCheck(this,AuthStore);_initializerDefineProperty(this,\"values\",_descriptor,this);makeObservable(this);}_createClass(AuthStore,[{key:\"setUsername\",value:function setUsername(username){this.values.username=username;}},{key:\"setPassword\",value:function setPassword(password){this.values.password=password;}},{key:\"login\",value:function login(){var _this=this;// 因为登陆成功后可能要执行跳转回首页等操作，所以我们用Promise进行封装，可以回调\nreturn new Promise(function(resolve,reject){Auth.login(_this.values.username,_this.values.password).then(function(user){UserStore.pullUser();message.info('登陆成功');resolve(user);}).catch(function(err){UserStore.resetUser();message.error('登陆失败');reject(err);});});}},{key:\"register\",value:function register(){var _this2=this;return new Promise(function(resolve,reject){Auth.register(_this2.values.username,_this2.values.password).then(function(user){UserStore.pullUser();message.info('注册成功');resolve(user);}).catch(function(err){UserStore.resetUser();message.error('注册失败');reject(err);});});}},{key:\"logout\",value:function logout(){Auth.logout();UserStore.resetUser();HistoryStore.reset();ImageStore.reset();}}]);return AuthStore;}(),(_descriptor=_applyDecoratedDescriptor(_class.prototype,\"values\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return{username:'',password:''};}}),_applyDecoratedDescriptor(_class.prototype,\"setUsername\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"setUsername\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"setPassword\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"setPassword\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"login\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"login\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"register\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"register\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"logout\",[action],Object.getOwnPropertyDescriptor(_class.prototype,\"logout\"),_class.prototype)),_class);export default new AuthStore();","map":{"version":3,"sources":["/Users/marshall/Desktop/epic-react/epic/src/stores/auth.js"],"names":["observable","action","makeObservable","Auth","UserStore","HistoryStore","message","ImageStore","AuthStore","username","values","password","Promise","resolve","reject","login","then","user","pullUser","info","catch","err","resetUser","error","register","logout","reset"],"mappings":"+2BAAA,OAAQA,UAAR,CAAoBC,MAApB,CAA4BC,cAA5B,KAAiD,MAAjD,CACA,OAAQC,IAAR,KAAmB,WAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,QAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,WAAzB,CACA,OAAQC,OAAR,KAAsB,MAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,SAAvB,C,GAEMC,CAAAA,S,iCACJ,oBAAc,4FACZN,cAAc,CAAC,IAAD,CAAd,CACD,C,iDAOD,qBAAoBO,QAApB,CAA8B,CAC5B,KAAKC,MAAL,CAAYD,QAAZ,CAAuBA,QAAvB,CACD,C,2BAED,qBAAoBE,QAApB,CAA8B,CAC5B,KAAKD,MAAL,CAAYC,QAAZ,CAAuBA,QAAvB,CACD,C,qBAED,gBAAgB,gBACd;AACA,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCX,IAAI,CAACY,KAAL,CAAW,KAAI,CAACL,MAAL,CAAYD,QAAvB,CAAiC,KAAI,CAACC,MAAL,CAAYC,QAA7C,EACGK,IADH,CACQ,SAAAC,IAAI,CAAI,CACZb,SAAS,CAACc,QAAV,GACAZ,OAAO,CAACa,IAAR,CAAa,MAAb,EACAN,OAAO,CAACI,IAAD,CAAP,CACD,CALH,EAMGG,KANH,CAMS,SAAAC,GAAG,CAAI,CACZjB,SAAS,CAACkB,SAAV,GACAhB,OAAO,CAACiB,KAAR,CAAc,MAAd,EACAT,MAAM,CAACO,GAAD,CAAN,CACD,CAVH,EAWD,CAZM,CAAP,CAaD,C,wBAED,mBAAmB,iBACjB,MAAO,IAAIT,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCX,IAAI,CAACqB,QAAL,CAAc,MAAI,CAACd,MAAL,CAAYD,QAA1B,CAAoC,MAAI,CAACC,MAAL,CAAYC,QAAhD,EACGK,IADH,CACQ,SAAAC,IAAI,CAAI,CACZb,SAAS,CAACc,QAAV,GACAZ,OAAO,CAACa,IAAR,CAAa,MAAb,EACAN,OAAO,CAACI,IAAD,CAAP,CACD,CALH,EAMGG,KANH,CAMS,SAAAC,GAAG,CAAI,CACZjB,SAAS,CAACkB,SAAV,GACAhB,OAAO,CAACiB,KAAR,CAAc,MAAd,EACAT,MAAM,CAACO,GAAD,CAAN,CACD,CAVH,EAWD,CAZM,CAAP,CAaD,C,sBAED,iBAAiB,CACflB,IAAI,CAACsB,MAAL,GACArB,SAAS,CAACkB,SAAV,GACAjB,YAAY,CAACqB,KAAb,GACAnB,UAAU,CAACmB,KAAX,GACD,C,2FAnDA1B,U,4FAAoB,CACnBS,QAAQ,CAAE,EADS,CAEnBE,QAAQ,CAAE,EAFS,C,+DAKpBV,M,8IAIAA,M,wIAIAA,M,qIAiBAA,M,sIAgBAA,M,wFAQH,cAAe,IAAIO,CAAAA,SAAJ,EAAf","sourcesContent":["import {observable, action, makeObservable} from 'mobx'\nimport {Auth} from '../models'\nimport UserStore from './user'\nimport HistoryStore from './history'\nimport {message} from 'antd'\nimport ImageStore from './image'\n\nclass AuthStore {\n  constructor() {\n    makeObservable(this)\n  }\n\n  @observable values = {\n    username: '',\n    password: ''\n  }\n\n  @action setUsername(username) {\n    this.values.username = username\n  }\n\n  @action setPassword(password) {\n    this.values.password = password\n  }\n\n  @action login() {\n    // 因为登陆成功后可能要执行跳转回首页等操作，所以我们用Promise进行封装，可以回调\n    return new Promise((resolve, reject) => {\n      Auth.login(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser()\n          message.info('登陆成功')\n          resolve(user)\n        })\n        .catch(err => {\n          UserStore.resetUser()\n          message.error('登陆失败')\n          reject(err)\n        })\n    })\n  }\n\n  @action register() {\n    return new Promise((resolve, reject) => {\n      Auth.register(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser()\n          message.info('注册成功')\n          resolve(user)\n        })\n        .catch(err => {\n          UserStore.resetUser()\n          message.error('注册失败')\n          reject(err)\n        })\n    })\n  }\n\n  @action logout() {\n    Auth.logout()\n    UserStore.resetUser()\n    HistoryStore.reset()\n    ImageStore.reset()\n  }\n}\n\nexport default new AuthStore()\n"]},"metadata":{},"sourceType":"module"}