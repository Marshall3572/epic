{"ast":null,"code":"import AV, { Query, User } from 'leancloud-storage';\nimport resolve from 'resolve';\nAV.init({\n  appId: 'NMaRGoaksIqBex94eqsQm1t5-gzGzoHsz',\n  appKey: 'HROcGnttJRHfwLsFD4gyRsRo',\n  serverURL: 'https://nmargoak.lc-cn-n1-shared.com'\n});\nconst Auth = {\n  // 如果不是用的leanCloud，这里的代码可以替换成ajax请求，一样的\n  register(username, password) {\n    let user = new User();\n    user.setUsername(username);\n    user.setPassword(password);\n    return new Promise((resolve, reject) => {\n      user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error));\n    });\n  },\n\n  login(username, password) {\n    return new Promise((resolve, reject) => {\n      User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error));\n    });\n  },\n\n  logout() {\n    User.logOut();\n  },\n\n  getCurrentUser() {\n    return User.current();\n  }\n\n};\nconst Uploader = {\n  add(file, filename) {\n    const item = new AV.Object('Image');\n    const avFile = new AV.File(filename, file);\n    item.set('filename', filename);\n    item.set('owner', AV.User.current());\n    item.set('url', avFile);\n    return new Promise((resolve, reject) => {\n      item.save().then(serverfile => resolve(serverfile), err => reject(err));\n    });\n  },\n\n  find({\n    page = 0,\n    limit = 10\n  }) {\n    const query = new AV.Query('Image');\n    query.include('owner');\n    query.limit(limit);\n    query.skip(page * limit);\n    query.descending('createAt'); // 只能查询自己的文件\n\n    query.equalTo('owner', AV.User.current());\n    return new Promise((resolve, reject) => {\n      query.find().then(result => {\n        resolve(result);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n};\nexport { // 先把这一个API暴露出去，后边有再加\nAuth, Uploader };","map":{"version":3,"sources":["/Users/marshall/Desktop/epic-react/epic/src/models/index.js"],"names":["AV","Query","User","resolve","init","appId","appKey","serverURL","Auth","register","username","password","user","setUsername","setPassword","Promise","reject","signUp","then","loginedUser","error","login","logIn","logout","logOut","getCurrentUser","current","Uploader","add","file","filename","item","Object","avFile","File","set","save","serverfile","err","find","page","limit","query","include","skip","descending","equalTo","result","catch"],"mappings":"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","sourcesContent":["import AV, {Query, User} from 'leancloud-storage'\nimport resolve from 'resolve'\n\nAV.init({\n  appId: 'NMaRGoaksIqBex94eqsQm1t5-gzGzoHsz',\n  appKey: 'HROcGnttJRHfwLsFD4gyRsRo',\n  serverURL: 'https://nmargoak.lc-cn-n1-shared.com'\n})\n\nconst Auth = {\n  // 如果不是用的leanCloud，这里的代码可以替换成ajax请求，一样的\n  register(username, password) {\n    let user = new User()\n    user.setUsername(username)\n    user.setPassword(password)\n    return new Promise((resolve, reject) => {\n      user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\n    })\n  },\n\n  login(username, password) {\n    return new Promise((resolve, reject) => {\n      User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error))\n    })\n  },\n  logout() {\n    User.logOut()\n  },\n  getCurrentUser() {\n    return User.current()\n  }\n}\n\nconst Uploader = {\n  add(file, filename) {\n    const item = new AV.Object('Image')\n    const avFile = new AV.File(filename, file)\n    item.set('filename', filename)\n    item.set('owner', AV.User.current())\n    item.set('url', avFile)\n    return new Promise((resolve, reject) => {\n      item.save().then(serverfile => resolve(serverfile), err => reject(err))\n    })\n  },\n  find({page = 0, limit = 10}) {\n    const query = new AV.Query('Image')\n    query.include('owner')\n    query.limit(limit)\n    query.skip(page * limit)\n    query.descending('createAt')\n    // 只能查询自己的文件\n    query.equalTo('owner', AV.User.current())\n    return new Promise((resolve, reject) => {\n      query.find()\n        .then((result) => {\n          resolve(result)\n        })\n        .catch((err) => {\n          reject(err)\n        })\n    })\n  }\n}\n\nexport {\n  // 先把这一个API暴露出去，后边有再加\n  Auth,\n  Uploader\n}"]},"metadata":{},"sourceType":"module"}