{"ast":null,"code":"import _initializerDefineProperty from \"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor;\n\nimport { observable, action, makeObservable } from 'mobx';\nimport { Auth } from '../models';\nimport UserStore from './user';\nimport HistoryStore from './history';\nimport { message } from 'antd';\nimport ImageStore from './image';\nlet AuthStore = (_class = class AuthStore {\n  constructor() {\n    _initializerDefineProperty(this, \"values\", _descriptor, this);\n\n    makeObservable(this);\n  }\n\n  setUsername(username) {\n    this.values.username = username;\n  }\n\n  setPassword(password) {\n    this.values.password = password;\n  }\n\n  login() {\n    // 因为登陆成功后可能要执行跳转回首页等操作，所以我们用Promise进行封装，可以回调\n    return new Promise((resolve, reject) => {\n      Auth.login(this.values.username, this.values.password).then(user => {\n        UserStore.pullUser();\n        message.info('登陆成功');\n        resolve(user);\n      }).catch(err => {\n        UserStore.resetUser();\n        message.error('登陆失败');\n        reject(err);\n      });\n    });\n  }\n\n  register() {\n    return new Promise((resolve, reject) => {\n      Auth.register(this.values.username, this.values.password).then(user => {\n        UserStore.pullUser();\n        message.info('注册成功');\n        resolve(user);\n      }).catch(err => {\n        UserStore.resetUser();\n        message.error('注册失败');\n        reject(err);\n      });\n    });\n  }\n\n  logout() {\n    Auth.logout();\n    UserStore.resetUser();\n    HistoryStore.reset();\n    ImageStore.reset();\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"values\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      username: '',\n      password: ''\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setUsername\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setUsername\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setPassword\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setPassword\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"login\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"login\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"register\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"register\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"logout\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"logout\"), _class.prototype)), _class);\nexport default new AuthStore();","map":{"version":3,"sources":["/Users/marshall/Desktop/epic-react/epic/src/stores/auth.js"],"names":["observable","action","makeObservable","Auth","UserStore","HistoryStore","message","ImageStore","AuthStore","constructor","setUsername","username","values","setPassword","password","login","Promise","resolve","reject","then","user","pullUser","info","catch","err","resetUser","error","register","logout","reset"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,MAApB,EAA4BC,cAA5B,QAAiD,MAAjD;AACA,SAAQC,IAAR,QAAmB,WAAnB;AACA,OAAOC,SAAP,MAAsB,QAAtB;AACA,OAAOC,YAAP,MAAyB,WAAzB;AACA,SAAQC,OAAR,QAAsB,MAAtB;AACA,OAAOC,UAAP,MAAuB,SAAvB;IAEMC,S,aAAN,MAAMA,SAAN,CAAgB;AACdC,EAAAA,WAAW,GAAG;AAAA;;AACZP,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAOOQ,EAAAA,WAAW,CAACC,QAAD,EAAW;AAC5B,SAAKC,MAAL,CAAYD,QAAZ,GAAuBA,QAAvB;AACD;;AAEOE,EAAAA,WAAW,CAACC,QAAD,EAAW;AAC5B,SAAKF,MAAL,CAAYE,QAAZ,GAAuBA,QAAvB;AACD;;AAEOC,EAAAA,KAAK,GAAG;AACd;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCf,MAAAA,IAAI,CAACY,KAAL,CAAW,KAAKH,MAAL,CAAYD,QAAvB,EAAiC,KAAKC,MAAL,CAAYE,QAA7C,EACGK,IADH,CACQC,IAAI,IAAI;AACZhB,QAAAA,SAAS,CAACiB,QAAV;AACAf,QAAAA,OAAO,CAACgB,IAAR,CAAa,MAAb;AACAL,QAAAA,OAAO,CAACG,IAAD,CAAP;AACD,OALH,EAMGG,KANH,CAMSC,GAAG,IAAI;AACZpB,QAAAA,SAAS,CAACqB,SAAV;AACAnB,QAAAA,OAAO,CAACoB,KAAR,CAAc,MAAd;AACAR,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OAVH;AAWD,KAZM,CAAP;AAaD;;AAEOG,EAAAA,QAAQ,GAAG;AACjB,WAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCf,MAAAA,IAAI,CAACwB,QAAL,CAAc,KAAKf,MAAL,CAAYD,QAA1B,EAAoC,KAAKC,MAAL,CAAYE,QAAhD,EACGK,IADH,CACQC,IAAI,IAAI;AACZhB,QAAAA,SAAS,CAACiB,QAAV;AACAf,QAAAA,OAAO,CAACgB,IAAR,CAAa,MAAb;AACAL,QAAAA,OAAO,CAACG,IAAD,CAAP;AACD,OALH,EAMGG,KANH,CAMSC,GAAG,IAAI;AACZpB,QAAAA,SAAS,CAACqB,SAAV;AACAnB,QAAAA,OAAO,CAACoB,KAAR,CAAc,MAAd;AACAR,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OAVH;AAWD,KAZM,CAAP;AAaD;;AAEOI,EAAAA,MAAM,GAAG;AACfzB,IAAAA,IAAI,CAACyB,MAAL;AACAxB,IAAAA,SAAS,CAACqB,SAAV;AACApB,IAAAA,YAAY,CAACwB,KAAb;AACAtB,IAAAA,UAAU,CAACsB,KAAX;AACD;;AAxDa,C,wEAKb7B,U;;;;;WAAoB;AACnBW,MAAAA,QAAQ,EAAE,EADS;AAEnBG,MAAAA,QAAQ,EAAE;AAFS,K;;gEAKpBb,M,oJAIAA,M,8IAIAA,M,2IAiBAA,M,4IAgBAA,M;AAQH,eAAe,IAAIO,SAAJ,EAAf","sourcesContent":["import {observable, action, makeObservable} from 'mobx'\nimport {Auth} from '../models'\nimport UserStore from './user'\nimport HistoryStore from './history'\nimport {message} from 'antd'\nimport ImageStore from './image'\n\nclass AuthStore {\n  constructor() {\n    makeObservable(this)\n  }\n\n  @observable values = {\n    username: '',\n    password: ''\n  }\n\n  @action setUsername(username) {\n    this.values.username = username\n  }\n\n  @action setPassword(password) {\n    this.values.password = password\n  }\n\n  @action login() {\n    // 因为登陆成功后可能要执行跳转回首页等操作，所以我们用Promise进行封装，可以回调\n    return new Promise((resolve, reject) => {\n      Auth.login(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser()\n          message.info('登陆成功')\n          resolve(user)\n        })\n        .catch(err => {\n          UserStore.resetUser()\n          message.error('登陆失败')\n          reject(err)\n        })\n    })\n  }\n\n  @action register() {\n    return new Promise((resolve, reject) => {\n      Auth.register(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser()\n          message.info('注册成功')\n          resolve(user)\n        })\n        .catch(err => {\n          UserStore.resetUser()\n          message.error('注册失败')\n          reject(err)\n        })\n    })\n  }\n\n  @action logout() {\n    Auth.logout()\n    UserStore.resetUser()\n    HistoryStore.reset()\n    ImageStore.reset()\n  }\n}\n\nexport default new AuthStore()\n"]},"metadata":{},"sourceType":"module"}