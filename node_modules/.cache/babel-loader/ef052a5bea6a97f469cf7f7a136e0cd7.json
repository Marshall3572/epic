{"ast":null,"code":"import _initializerDefineProperty from \"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/marshall/Desktop/epic-react/epic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;\n\nimport React from 'react';\nimport { observable, action, makeObservable } from 'mobx';\nimport { Uploader } from '../models';\nimport { message } from 'antd';\nlet ImageStore = (_class = class ImageStore {\n  constructor() {\n    _initializerDefineProperty(this, \"filename\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"file\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"isUploading\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"serverFile\", _descriptor4, this);\n\n    makeObservable(this);\n  }\n\n  setFilename(newFilename) {\n    this.filename = newFilename;\n  }\n\n  setFile(newFile) {\n    this.file = newFile;\n  }\n\n  upload() {\n    this.isUploading = true; // 若上传失败，上传结果展示的还是上次的结果，会让人产生误会，所以每次上传都清空一下\n\n    this.serverFile = null;\n    return new Promise((resolve, reject) => {\n      Uploader.add(this.file, this.filename).then(serverFile => {\n        this.serverFile = serverFile;\n        resolve(serverFile);\n      }).catch(err => {\n        message.error('上传失败');\n        reject(err);\n      }).finally(() => {\n        this.isUploading = false;\n      });\n    });\n  }\n\n  reset() {\n    this.isUploading = false;\n    this.serverFile = null;\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"filename\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"file\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"isUploading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"serverFile\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setFilename\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setFilename\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setFile\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setFile\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"upload\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"upload\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reset\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"reset\"), _class.prototype)), _class); // export { UserStore } 不能直接这么写，最好是直接导出一个对象\n\nexport default new ImageStore();","map":{"version":3,"sources":["/Users/marshall/Desktop/epic-react/epic/src/stores/image.js"],"names":["React","observable","action","makeObservable","Uploader","message","ImageStore","constructor","setFilename","newFilename","filename","setFile","newFile","file","upload","isUploading","serverFile","Promise","resolve","reject","add","then","catch","err","error","finally","reset"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,EAAoBC,MAApB,EAA4BC,cAA5B,QAAiD,MAAjD;AACA,SAAQC,QAAR,QAAuB,WAAvB;AACA,SAAQC,OAAR,QAAsB,MAAtB;IAEMC,U,aAAN,MAAMA,UAAN,CAAiB;AACfC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AAAA;;AACZJ,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAOOK,EAAAA,WAAW,CAACC,WAAD,EAAc;AAC/B,SAAKC,QAAL,GAAgBD,WAAhB;AACD;;AAEOE,EAAAA,OAAO,CAACC,OAAD,EAAU;AACvB,SAAKC,IAAL,GAAYD,OAAZ;AACD;;AAEOE,EAAAA,MAAM,GAAG;AACf,SAAKC,WAAL,GAAmB,IAAnB,CADe,CAEf;;AACA,SAAKC,UAAL,GAAkB,IAAlB;AAEA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCf,MAAAA,QAAQ,CAACgB,GAAT,CAAa,KAAKP,IAAlB,EAAwB,KAAKH,QAA7B,EAAuCW,IAAvC,CAA4CL,UAAU,IAAI;AACxD,aAAKA,UAAL,GAAkBA,UAAlB;AACAE,QAAAA,OAAO,CAACF,UAAD,CAAP;AACD,OAHD,EAGGM,KAHH,CAGSC,GAAG,IAAI;AACdlB,QAAAA,OAAO,CAACmB,KAAR,CAAc,MAAd;AACAL,QAAAA,MAAM,CAACI,GAAD,CAAN;AACD,OAND,EAMGE,OANH,CAMW,MAAM;AACf,aAAKV,WAAL,GAAmB,KAAnB;AACD,OARD;AASD,KAVM,CAAP;AAWD;;AAEOW,EAAAA,KAAK,GAAG;AACd,SAAKX,WAAL,GAAmB,KAAnB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACD;;AAvCc,C,0EAKdf,U;;;;;WAAsB,E;;wEACtBA,U;;;;;WAAkB,I;;+EAClBA,U;;;;;WAAyB,K;;8EACzBA,U;;;;;WAAwB,I;;gEAExBC,M,gJAIAA,M,2IAIAA,M,yIAkBAA,M,4FAOH;;AACA,eAAe,IAAII,UAAJ,EAAf","sourcesContent":["import React from 'react'\nimport {observable, action, makeObservable} from 'mobx'\nimport {Uploader} from '../models'\nimport {message} from 'antd'\n\nclass ImageStore {\n  constructor() {\n    makeObservable(this)\n  }\n\n  @observable filename = ''\n  @observable file = null\n  @observable isUploading = false\n  @observable serverFile = null\n\n  @action setFilename(newFilename) {\n    this.filename = newFilename\n  }\n\n  @action setFile(newFile) {\n    this.file = newFile\n  }\n\n  @action upload() {\n    this.isUploading = true\n    // 若上传失败，上传结果展示的还是上次的结果，会让人产生误会，所以每次上传都清空一下\n    this.serverFile = null\n\n    return new Promise((resolve, reject) => {\n      Uploader.add(this.file, this.filename).then(serverFile => {\n        this.serverFile = serverFile\n        resolve(serverFile)\n      }).catch(err => {\n        message.error('上传失败')\n        reject(err)\n      }).finally(() => {\n        this.isUploading = false\n      })\n    })\n  }\n\n  @action reset() {\n    this.isUploading = false\n    this.serverFile = null\n  }\n}\n\n\n// export { UserStore } 不能直接这么写，最好是直接导出一个对象\nexport default new ImageStore()\n"]},"metadata":{},"sourceType":"module"}